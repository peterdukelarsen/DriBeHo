/*
 * This file is generated by jOOQ.
 */
package com.dribeho.database.jooq.tables;


import com.dribeho.database.jooq.Dribehodb;
import com.dribeho.database.jooq.Indexes;
import com.dribeho.database.jooq.Keys;
import com.dribeho.database.jooq.tables.records.ReviewsRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reviews extends TableImpl<ReviewsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dribehodb.reviews</code>
     */
    public static final Reviews REVIEWS = new Reviews();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReviewsRecord> getRecordType() {
        return ReviewsRecord.class;
    }

    /**
     * The column <code>dribehodb.reviews.id</code>.
     */
    public final TableField<ReviewsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>dribehodb.reviews.user_id</code>.
     */
    public final TableField<ReviewsRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(36).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>dribehodb.reviews.shop_id</code>.
     */
    public final TableField<ReviewsRecord, String> SHOP_ID = createField(DSL.name("shop_id"), SQLDataType.VARCHAR(36).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>dribehodb.reviews.rating</code>.
     */
    public final TableField<ReviewsRecord, Byte> RATING = createField(DSL.name("rating"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>dribehodb.reviews.review_text</code>.
     */
    public final TableField<ReviewsRecord, String> REVIEW_TEXT = createField(DSL.name("review_text"), SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>dribehodb.reviews.date_posted</code>.
     */
    public final TableField<ReviewsRecord, LocalDate> DATE_POSTED = createField(DSL.name("date_posted"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>dribehodb.reviews.helpful_votes</code>.
     */
    public final TableField<ReviewsRecord, Integer> HELPFUL_VOTES = createField(DSL.name("helpful_votes"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private Reviews(Name alias, Table<ReviewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reviews(Name alias, Table<ReviewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>dribehodb.reviews</code> table reference
     */
    public Reviews(String alias) {
        this(DSL.name(alias), REVIEWS);
    }

    /**
     * Create an aliased <code>dribehodb.reviews</code> table reference
     */
    public Reviews(Name alias) {
        this(alias, REVIEWS);
    }

    /**
     * Create a <code>dribehodb.reviews</code> table reference
     */
    public Reviews() {
        this(DSL.name("reviews"), null);
    }

    public <O extends Record> Reviews(Table<O> child, ForeignKey<O, ReviewsRecord> key) {
        super(child, key, REVIEWS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Dribehodb.DRIBEHODB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.REVIEWS_SHOP_ID, Indexes.REVIEWS_USER_ID);
    }

    @Override
    public UniqueKey<ReviewsRecord> getPrimaryKey() {
        return Keys.KEY_REVIEWS_PRIMARY;
    }

    @Override
    public List<ForeignKey<ReviewsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REVIEWS_IBFK_1, Keys.REVIEWS_IBFK_2);
    }

    private transient Users _users;
    private transient Cafes _cafes;

    /**
     * Get the implicit join path to the <code>dribehodb.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.REVIEWS_IBFK_1);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>dribehodb.cafes</code> table.
     */
    public Cafes cafes() {
        if (_cafes == null)
            _cafes = new Cafes(this, Keys.REVIEWS_IBFK_2);

        return _cafes;
    }

    @Override
    public Reviews as(String alias) {
        return new Reviews(DSL.name(alias), this);
    }

    @Override
    public Reviews as(Name alias) {
        return new Reviews(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviews rename(String name) {
        return new Reviews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviews rename(Name name) {
        return new Reviews(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, Byte, String, LocalDate, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
