/*
 * This file is generated by jOOQ.
 */
package com.dribeho.database.jooq.tables;


import com.dribeho.database.jooq.Dribehodb;
import com.dribeho.database.jooq.tables.records.QuarkusRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quarkus extends TableImpl<QuarkusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dribehodb.quarkus</code>
     */
    public static final Quarkus QUARKUS = new Quarkus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuarkusRecord> getRecordType() {
        return QuarkusRecord.class;
    }

    /**
     * The column <code>dribehodb.quarkus.id</code>.
     */
    public final TableField<QuarkusRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dribehodb.quarkus.name</code>.
     */
    public final TableField<QuarkusRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(20).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private Quarkus(Name alias, Table<QuarkusRecord> aliased) {
        this(alias, aliased, null);
    }

    private Quarkus(Name alias, Table<QuarkusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>dribehodb.quarkus</code> table reference
     */
    public Quarkus(String alias) {
        this(DSL.name(alias), QUARKUS);
    }

    /**
     * Create an aliased <code>dribehodb.quarkus</code> table reference
     */
    public Quarkus(Name alias) {
        this(alias, QUARKUS);
    }

    /**
     * Create a <code>dribehodb.quarkus</code> table reference
     */
    public Quarkus() {
        this(DSL.name("quarkus"), null);
    }

    public <O extends Record> Quarkus(Table<O> child, ForeignKey<O, QuarkusRecord> key) {
        super(child, key, QUARKUS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Dribehodb.DRIBEHODB;
    }

    @Override
    public Quarkus as(String alias) {
        return new Quarkus(DSL.name(alias), this);
    }

    @Override
    public Quarkus as(Name alias) {
        return new Quarkus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quarkus rename(String name) {
        return new Quarkus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quarkus rename(Name name) {
        return new Quarkus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
